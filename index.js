const femaleIcon = `<svg class="icon" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="50" height="50" viewBox="0 0 50 50">
<path d="M 23.75 2 C 12.800781 2 6 8.820313 6 19.78125 C 6 21.34375 6.214844 22.882813 6.4375 24.53125 C 7.042969 28.972656 7.671875 33.578125 4 38.5625 C 3.839844 38.78125 3.765625 39.042969 3.8125 39.3125 C 3.859375 39.582031 4.023438 39.816406 4.25 39.96875 C 4.417969 40.078125 8.402344 42.679688 17.5 43.6875 C 19.804688 46.464844 22.449219 48 25 48 C 27.5625 48 30.226563 46.472656 32.53125 43.6875 C 41.625 42.671875 45.855469 40.109375 46.03125 40 C 46.273438 39.851563 46.417969 39.589844 46.46875 39.3125 C 46.519531 39.035156 46.457031 38.753906 46.28125 38.53125 C 42.554688 33.742188 43.054688 29.667969 43.59375 25.34375 C 43.785156 23.800781 44 22.195313 44 20.5625 C 44 14.027344 41.078125 6.410156 32.875 6.15625 C 29.402344 2.71875 26.007813 2 23.75 2 Z M 31.84375 17.34375 C 33.328125 18.921875 36 22.53125 36 28.28125 C 36 35.953125 31.234375 42.0625 31.1875 42.125 C 31.179688 42.136719 31.195313 42.144531 31.1875 42.15625 C 29.21875 44.628906 27.023438 46 25 46 C 22.972656 46 20.757813 44.621094 18.78125 42.125 C 18.773438 42.113281 18.757813 42.105469 18.75 42.09375 C 18.703125 42.050781 14 37.570313 14 31 C 14 25.996094 18.296875 24.945313 22.09375 24.03125 C 22.878906 23.84375 23.609375 23.675781 24.28125 23.46875 C 28.769531 22.078125 30.921875 19.125 31.84375 17.34375 Z M 19.5 28 C 18.671875 28 18 28.671875 18 29.5 C 18 30.328125 18.671875 31 19.5 31 C 20.328125 31 21 30.328125 21 29.5 C 21 28.671875 20.328125 28 19.5 28 Z M 30.5 28 C 29.671875 28 29 28.671875 29 29.5 C 29 30.328125 29.671875 31 30.5 31 C 31.328125 31 32 30.328125 32 29.5 C 32 28.671875 31.328125 28 30.5 28 Z"></path>
</svg>`
const maleIcon = `<svg class="icon" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="50" height="50" viewBox="0 0 50 50">
<path d="M 24.71875 2 C 24.089844 2 23.472656 2.015625 22.875 2.0625 C 22.800781 2.066406 22.730469 2.085938 22.65625 2.09375 C 22.132813 2.140625 21.621094 2.203125 21.125 2.28125 C 20.59375 2.367188 20.0625 2.46875 19.5625 2.59375 C 19.539063 2.597656 19.519531 2.621094 19.5 2.625 C 18.445313 2.894531 17.46875 3.25 16.5625 3.6875 C 15.648438 4.128906 14.820313 4.671875 14.0625 5.28125 C 13.6875 5.585938 13.335938 5.90625 13 6.25 C 11.671875 7.609375 10.667969 9.257813 10 11.21875 C 9.839844 11.691406 9.683594 12.179688 9.5625 12.6875 C 9.453125 13.140625 9.359375 13.617188 9.28125 14.09375 C 9.230469 14.402344 9.191406 14.714844 9.15625 15.03125 C 9.128906 15.285156 9.082031 15.519531 9.0625 15.78125 C 9.015625 16.371094 9 16.976563 9 17.59375 C 9 18.101563 9.089844 18.746094 9.1875 19.4375 C 9.292969 20.183594 9.445313 20.992188 9.625 21.8125 C 9.785156 22.546875 9.941406 23.257813 10.125 23.9375 C 10.144531 24.015625 10.167969 24.109375 10.1875 24.1875 C 10.3125 24.636719 10.441406 25.089844 10.5625 25.46875 C 10.269531 25.71875 9.972656 25.878906 9.6875 26.3125 C 9.207031 27.046875 8.855469 28.074219 9 29.3125 C 9.421875 32.886719 11.664063 34.164063 12.40625 34.53125 C 12.691406 36.203125 13.554688 38.265625 14.96875 40.375 C 16.484375 42.636719 18.578125 44.808594 21.125 46.03125 C 21.171875 46.054688 21.203125 46.101563 21.25 46.125 C 22.167969 47.222656 23.464844 48 25 48 C 26.535156 48 27.832031 47.222656 28.75 46.125 C 28.796875 46.101563 28.828125 46.054688 28.875 46.03125 C 31.414063 44.804688 33.464844 42.636719 34.96875 40.375 C 36.367188 38.269531 37.214844 36.195313 37.5 34.53125 C 38.234375 34.183594 40.542969 32.941406 40.96875 29.34375 C 41.113281 28.101563 40.734375 27.050781 40.25 26.3125 C 39.960938 25.875 39.667969 25.722656 39.375 25.46875 C 39.539063 24.949219 39.734375 24.363281 39.90625 23.71875 C 39.917969 23.679688 39.925781 23.632813 39.9375 23.59375 C 39.957031 23.527344 39.980469 23.445313 40 23.375 C 40.179688 22.671875 40.304688 21.992188 40.4375 21.3125 C 40.589844 20.527344 40.726563 19.753906 40.8125 19 C 40.839844 18.78125 40.855469 18.558594 40.875 18.34375 C 40.914063 17.949219 40.949219 17.5625 40.96875 17.15625 C 40.988281 16.765625 41 16.382813 41 16 C 41 15.730469 40.988281 15.421875 40.96875 15.125 C 40.964844 15.082031 40.972656 15.042969 40.96875 15 C 40.949219 14.753906 40.90625 14.511719 40.875 14.25 C 40.855469 14.105469 40.835938 13.957031 40.8125 13.8125 C 40.789063 13.667969 40.777344 13.523438 40.75 13.375 C 40.726563 13.257813 40.714844 13.148438 40.6875 13.03125 C 40.652344 12.867188 40.605469 12.695313 40.5625 12.53125 C 40.535156 12.425781 40.5 12.320313 40.46875 12.21875 C 40.417969 12.042969 40.371094 11.863281 40.3125 11.6875 C 40.28125 11.589844 40.253906 11.5 40.21875 11.40625 C 40.15625 11.238281 40.070313 11.074219 40 10.90625 C 39.886719 10.640625 39.761719 10.382813 39.625 10.125 C 39.570313 10.019531 39.527344 9.914063 39.46875 9.8125 C 39.390625 9.671875 39.277344 9.542969 39.1875 9.40625 C 39.121094 9.304688 39.070313 9.191406 39 9.09375 C 38.90625 8.964844 38.820313 8.839844 38.71875 8.71875 C 38.640625 8.621094 38.550781 8.53125 38.46875 8.4375 C 38.367188 8.324219 38.265625 8.199219 38.15625 8.09375 C 38.054688 7.992188 37.949219 7.910156 37.84375 7.8125 C 37.628906 7.617188 37.394531 7.449219 37.15625 7.28125 C 36.160156 6.582031 34.972656 6.125 33.5625 6.03125 C 33.289063 5.628906 32.859375 5.117188 32.28125 4.59375 C 32.054688 4.386719 31.8125 4.171875 31.53125 3.96875 C 31.5 3.945313 31.46875 3.929688 31.4375 3.90625 C 31.40625 3.886719 31.375 3.863281 31.34375 3.84375 C 31.066406 3.65625 30.765625 3.484375 30.4375 3.3125 C 29.429688 2.78125 28.195313 2.324219 26.625 2.125 C 26.554688 2.117188 26.480469 2.101563 26.40625 2.09375 C 26.347656 2.085938 26.277344 2.101563 26.21875 2.09375 C 25.746094 2.046875 25.246094 2 24.71875 2 Z M 32.5 14.375 C 33.472656 15.925781 35 18.863281 35 22 C 35.019531 23.667969 35.664063 26.445313 37.90625 26.71875 C 38.105469 26.867188 38.371094 27.097656 38.59375 27.4375 C 38.871094 27.863281 39.058594 28.375 38.96875 29.125 C 38.585938 32.347656 36.34375 32.96875 36.34375 32.96875 C 35.96875 33.089844 35.699219 33.421875 35.65625 33.8125 C 35.539063 34.917969 34.703125 37.160156 33.3125 39.25 C 31.921875 41.339844 30.011719 43.332031 27.90625 44.3125 C 27.742188 44.386719 27.601563 44.507813 27.5 44.65625 C 26.960938 45.460938 26.046875 46 25 46 C 23.953125 46 23.039063 45.460938 22.5 44.65625 C 22.398438 44.507813 22.257813 44.386719 22.09375 44.3125 C 19.980469 43.332031 18.058594 41.339844 16.65625 39.25 C 15.253906 37.160156 14.394531 34.914063 14.28125 33.8125 C 14.234375 33.441406 13.980469 33.125 13.625 33 C 13.625 33 11.378906 32.324219 11 29.09375 C 10.910156 28.339844 11.101563 27.820313 11.375 27.40625 C 11.488281 27.234375 11.625 27.09375 11.75 26.96875 C 11.828125 26.988281 11.917969 27 12 27 C 13.972656 27 14.65625 23.714844 15 22 C 15.625 18.878906 19.0625 18 24 18 C 28.652344 18 31.265625 15.839844 32.5 14.375 Z M 19.5 27 C 18.671875 27 18 27.671875 18 28.5 C 18 29.328125 18.671875 30 19.5 30 C 20.328125 30 21 29.328125 21 28.5 C 21 27.671875 20.328125 27 19.5 27 Z M 30.5 27 C 29.671875 27 29 27.671875 29 28.5 C 29 29.328125 29.671875 30 30.5 30 C 31.328125 30 32 29.328125 32 28.5 C 32 27.671875 31.328125 27 30.5 27 Z"></path>
</svg>`
const kidsIcon = `<svg class="icon" xmlns="http://www.w3.org/2000/svg" shape-rendering="geometricPrecision" text-rendering="geometricPrecision" image-rendering="optimizeQuality" fill-rule="evenodd" clip-rule="evenodd" viewBox="0 0 465 512.437"><path d="M15.055 290.489C8.752 174.735 13.442 51.181 172.108 46.507c54.749-43.269 74.153-78.319 58.489 0 190.086-18.175 233.722 78.475 219.099 243.012 29.582 41.443 14.752 88.519-31.346 114.72-86.946 139.8-282.179 148.659-369.687 0-49.557-24.656-62.201-68.66-33.608-113.75zm45.524 1.65c25.689-16.603 37.934-52.619 36.323-108.637 90.63 78.875 180.991 79.571 271.095-.659.776 46.593 7.536 88.036 36.983 109.956l-5.613 32.69 15.519-19.482c37.036 9.406 28.806 67.909-11.227 61.087-60.517 148.061-267.349 164.961-341.099 0-33.681 7.723-52.152-46.174-12.878-61.748l16.623 20.071-5.726-33.278z"/></svg>`
function initializeTabs(categories) {
  const tabsContainer = document.querySelector('.tabs-container');

  categories.forEach(category => {
    const tabItemContainer = document.createElement('li');
    tabItemContainer.classList.add('tab-item-container');

    const tabBtn = document.createElement('button');
    tabBtn.type = 'button';
    tabBtn.classList.add('tab-btn');
    switch (category.category_name) {
      case "Men":
        tabBtn.innerHTML = maleIcon + category.category_name;
        break;
      case "Women":
        tabBtn.innerHTML = femaleIcon + category.category_name;
        break;
      case "Kids":
        tabBtn.innerHTML = kidsIcon + category.category_name;
        break;
    }
    tabBtn.onclick = () => clickTabItem(category, tabItemContainer);

    tabItemContainer.appendChild(tabBtn);
    tabsContainer?.appendChild(tabItemContainer);
    if (category.category_name === "Men") {
      clickTabItem(category, tabItemContainer);
    }
  });
}

function createHTMLElement(tag, className, content) {
  const element = document.createElement(tag);
  if (className) element.classList.add(className);
  if (content) element.innerHTML = content;
  return element;
}

function createProjectCard(project) {
  const projectCard = createHTMLElement('li', 'project-card', `
  ${project.badge_text ? `<div class="ribbon">${project.badge_text}</div>` : ''}
  <div class="carousel-container">
    ${project.second_image !== "empty" ? '<button class="carousel-arrow prev"><i class="fa-solid fa-chevron-left"></i></button>' : ''}
    <div class="carousel-images">
      <img src="${project.image}" alt="${project.title}">
      ${project.second_image !== "empty" ? `<img src="${project.second_image}" alt="${project.title}">` : ''}
    </div>
    ${project.second_image !== "empty" ? '<button class="carousel-arrow next"><i class="fa-solid fa-chevron-right"></i></button>' : ''}
    </div>
    <div class="project-details">
      <div class="product-title-container">
        <h4 class="product-title" title="${project.title}">${project.title}</h4>
        <small class="product-vendor">${project.vendor}</small>
      </div>
      <div class="product-price-container">
        <p class="product-price"><b>Rs ${project.price}</b></p>
        <p class="product-compare-price">${project.compare_at_price}</p>
        <p class="product-percentage">${((project.compare_at_price - project.price) / project.compare_at_price * 100).toFixed(2)}% Off</p>
      </div>
    <button class="add-to-cart-btn">Add to Cart</button>
  </div>`);
  const container = projectCard.querySelector('.carousel-container');
  const images = projectCard.querySelector('.carousel-images');
  const prevArrow = projectCard.querySelector('.carousel-arrow.prev');
  const nextArrow = projectCard.querySelector('.carousel-arrow.next');
  let currentIndex = 0;

  function showPrevImage() {
    currentIndex = Math.max(currentIndex - 1, 0);
    updateCarousel();
  }

  function showNextImage() {
    currentIndex = (currentIndex + 1) % images.children.length;
    updateCarousel();
  }

  function updateCarousel() {
    const translateValue = -currentIndex * 100 + '%';
    images.style.transform = `translateX(${translateValue})`;
  }

  prevArrow?.addEventListener('click', showPrevImage);
  nextArrow?.addEventListener('click', showNextImage);

  // Optionally, you can set up an interval to automatically rotate the carousel
  setInterval(() => showNextImage(), 10000);
  return projectCard;
}

function clickTabItem(category, tabItemContainer) {
  document.querySelector('.tab-item-container.active')?.classList.remove('active');
  tabItemContainer.classList.add('active');
  const projectListContainer = document.getElementById('projectListContainer');
  projectListContainer.innerHTML = ''; // Clear existing projects
  category.category_products.forEach(project => {
    const projectCard = createProjectCard(project);
    projectListContainer.appendChild(projectCard);
  });
}


fetch('https://cdn.shopify.com/s/files/1/0564/3685/0790/files/multiProduct.json')
  .then(response => response.json())
  .then(data => {
    initializeTabs(data.categories);
  })
  .catch(error => {
    console.error('Error fetching categories:', error);
  });
